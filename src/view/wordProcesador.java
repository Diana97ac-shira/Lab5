
package view;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
// por aqui anda Flor
/**
 *
 * @author Diana & Flor
 */
public class wordProcesador extends javax.swing.JFrame {

    /**
     * Creates new form wordProcesador
     */
    public wordProcesador() {
        initComponents();
        this.setLocationRelativeTo(null);
        setIconImage(getIconImage());
        txtcantPalabra.setEditable(false);
        // Llama al nuevo método para configurar los atajos de teclado
        configureShortcuts();

    }

    public static int contadorPalabras(String texto) {
        if (texto.isEmpty()) {
            return 0;
        }
        String cantidadPalabras[] = texto.trim().split(" +");
        return cantidadPalabras.length;
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("img/Word.png"));

        return retValue;
    }

    private void configureShortcuts() {
        // Deshabilita el atajo de teclado Ctrl+C para la acción de copiar en el JTextArea
        txtHoja.getInputMap().put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK), "none");

        // Ahora, el JMenuItem mnCerrar puede usar Ctrl+C
        mnCerrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        plBarraHerramientas = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        chcBold = new javax.swing.JCheckBox();
        chcItalic = new javax.swing.JCheckBox();
        lblFont = new javax.swing.JLabel();
        cmbFont = new javax.swing.JComboBox<>();
        lblSize = new javax.swing.JLabel();
        cmbSize = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtHoja = new javax.swing.JTextArea();
        plBarraEstado = new javax.swing.JPanel();
        lblRecuento = new javax.swing.JLabel();
        txtcantPalabra = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnNuevo = new javax.swing.JMenuItem();
        mnCerrar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnBold = new javax.swing.JCheckBoxMenuItem();
        mnItalic = new javax.swing.JCheckBoxMenuItem();
        mnColor = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Word Processor");

        plBarraHerramientas.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Font & Style"));

        chcBold.setText("Bold");
        chcBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chcBoldActionPerformed(evt);
            }
        });

        chcItalic.setText("Italic");
        chcItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chcItalicActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chcBold)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chcItalic)
                .addGap(0, 22, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chcBold)
                    .addComponent(chcItalic))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        lblFont.setText("Font:");

        cmbFont.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Times New Roman", "Calibri", "Arial Black", "Arial" }));
        cmbFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFontActionPerformed(evt);
            }
        });

        lblSize.setText("Size:");

        cmbSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10", "15", "20", "25", "30", "35" }));
        cmbSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout plBarraHerramientasLayout = new javax.swing.GroupLayout(plBarraHerramientas);
        plBarraHerramientas.setLayout(plBarraHerramientasLayout);
        plBarraHerramientasLayout.setHorizontalGroup(
            plBarraHerramientasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, plBarraHerramientasLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblFont)
                .addGap(18, 18, 18)
                .addComponent(cmbFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(lblSize)
                .addGap(18, 18, 18)
                .addComponent(cmbSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        plBarraHerramientasLayout.setVerticalGroup(
            plBarraHerramientasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plBarraHerramientasLayout.createSequentialGroup()
                .addGroup(plBarraHerramientasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(plBarraHerramientasLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(plBarraHerramientasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFont)
                            .addComponent(cmbFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSize)
                            .addComponent(cmbSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(plBarraHerramientasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        txtHoja.setColumns(20);
        txtHoja.setRows(5);
        txtHoja.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHojaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(txtHoja);

        plBarraEstado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblRecuento.setText("Recuento de palabras:");

        javax.swing.GroupLayout plBarraEstadoLayout = new javax.swing.GroupLayout(plBarraEstado);
        plBarraEstado.setLayout(plBarraEstadoLayout);
        plBarraEstadoLayout.setHorizontalGroup(
            plBarraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plBarraEstadoLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblRecuento)
                .addGap(28, 28, 28)
                .addComponent(txtcantPalabra, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        plBarraEstadoLayout.setVerticalGroup(
            plBarraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plBarraEstadoLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(plBarraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtcantPalabra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRecuento))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        mnNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnNuevo.setText("Nuevo");
        mnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(mnNuevo);

        mnCerrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnCerrar.setText("Cerrar");
        mnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnCerrarActionPerformed(evt);
            }
        });
        jMenu1.add(mnCerrar);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Style");
        jMenu2.setBorderPainted(false);

        mnBold.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnBold.setText("Bold");
        mnBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnBoldActionPerformed(evt);
            }
        });
        jMenu2.add(mnBold);

        mnItalic.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnItalic.setText("Italic");
        mnItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnItalicActionPerformed(evt);
            }
        });
        jMenu2.add(mnItalic);

        jMenuBar1.add(jMenu2);

        mnColor.setText("Color");
        mnColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mnColorMouseClicked(evt);
            }
        });
        jMenuBar1.add(mnColor);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(plBarraHerramientas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(plBarraEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(plBarraHerramientas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(plBarraEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFontActionPerformed
        // TODO add your handling code here:

        int indice = cmbFont.getSelectedIndex();
        Font fondo = txtHoja.getFont();
        switch (indice) {
            case 0 -> {

                fondo = new Font("Times New Roman", fondo.getStyle(), fondo.getSize());
            }
            case 1 -> {
                fondo = new Font("Calibri", fondo.getStyle(), fondo.getSize());
            }
            case 2 -> {
                fondo = new Font("Arial Black", fondo.getStyle(), fondo.getSize());
            }
            case 3 -> {
                fondo = new Font("Arial", fondo.getStyle(), fondo.getSize());
            }

        }
        txtHoja.setFont(fondo);


    }//GEN-LAST:event_cmbFontActionPerformed

    private void cmbSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSizeActionPerformed
        // TODO add your handling code here:

        int indice = cmbSize.getSelectedIndex();
        Font fondo = txtHoja.getFont();
        switch (indice) {
            case 0 -> {
                fondo = new Font(fondo.getName(), fondo.getStyle(), 10);
            }
            case 1 -> {
                fondo = new Font(fondo.getName(), fondo.getStyle(), 15);
            }
            case 2 -> {
                fondo = new Font(fondo.getName(), fondo.getStyle(), 20);
            }
            case 3 -> {
                fondo = new Font(fondo.getName(), fondo.getStyle(), 25);
            }
            case 4 -> {
                fondo = new Font(fondo.getName(), fondo.getStyle(), 30);
            }
            case 5 -> {
                fondo = new Font(fondo.getName(), fondo.getStyle(), 35);
            }

        }
        txtHoja.setFont(fondo);

    }//GEN-LAST:event_cmbSizeActionPerformed

    private void chcBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chcBoldActionPerformed
        // TODO add your handling code here:

        Font currentFont = txtHoja.getFont();
        int newStyle = currentFont.getStyle();

        if (chcBold.isSelected()) {
            newStyle = newStyle | Font.BOLD;
        } else {
            newStyle = newStyle & ~Font.BOLD;
        }

        txtHoja.setFont(currentFont.deriveFont(newStyle));
        mnBold.setSelected(chcBold.isSelected()); // Sincroniza el JCheckBoxMenuItem del menú

    }//GEN-LAST:event_chcBoldActionPerformed

    private void chcItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chcItalicActionPerformed
        // TODO add your handling code here:

        Font currentFont = txtHoja.getFont();
        int newStyle = currentFont.getStyle();

        if (chcItalic.isSelected()) {
            newStyle = newStyle | Font.ITALIC;
        } else {
            newStyle = newStyle & ~Font.ITALIC;
        }

        txtHoja.setFont(currentFont.deriveFont(newStyle));
        mnItalic.setSelected(chcItalic.isSelected()); // Sincroniza el JCheckBoxMenuItem del menú


    }//GEN-LAST:event_chcItalicActionPerformed

    private void txtHojaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHojaKeyReleased
        // TODO add your handling code here:

        String texto = txtHoja.getText();
        txtcantPalabra.setText(String.valueOf(contadorPalabras(texto)));


    }//GEN-LAST:event_txtHojaKeyReleased

    private void mnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnNuevoActionPerformed
        // TODO add your handling code here:

        txtHoja.setText("");
        txtHoja.setBackground(Color.WHITE); // Se simula una hoja de papel en blanco.
        txtHoja.setEditable(true); // Habilitar la edición de nuevo.
        txtHoja.setForeground(Color.BLACK); // Establece el color del texto a negro por defecto.

        // Restablece los JComboBox y JCheckBox.
        cmbSize.setSelectedIndex(0);
        cmbFont.setSelectedIndex(0);
        chcItalic.setSelected(false);
        chcBold.setSelected(false);
        mnBold.setSelected(false);
        mnItalic.setSelected(false);

        txtHoja.setFont(new Font("Times new roman", Font.PLAIN, 10)); // Restablecer a los valores iniciales.
        txtcantPalabra.setText("0");
        JOptionPane.showMessageDialog(null, "Se ha creado una nueva hoja de texto", "Presiona OK para continuar", 1);


    }//GEN-LAST:event_mnNuevoActionPerformed

    private void mnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnCerrarActionPerformed

        // La opción "Cerrar" vacía el documento, lo hace no editable y cambia el fondo.
        txtHoja.setText(""); // Borra el texto de la hoja.
        txtHoja.setBackground(Color.GRAY); // Cambia el fondo a gris para simular que no hay documento abierto.
        txtHoja.setEditable(false); // Hace que el área de texto no sea editable.
        txtcantPalabra.setText("0"); // Reinicia el contador de palabras.
        JOptionPane.showMessageDialog(null, "La hoja de texto se ha cerrado!");

    }//GEN-LAST:event_mnCerrarActionPerformed

    private void mnBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnBoldActionPerformed
        // TODO add your handling code here:

        Font currentFont = txtHoja.getFont();
        int newStyle = currentFont.getStyle();

        if (mnBold.isSelected()) {
            newStyle = newStyle | Font.BOLD;
        } else {
            newStyle = newStyle & ~Font.BOLD;
        }

        txtHoja.setFont(currentFont.deriveFont(newStyle));
        chcBold.setSelected(mnBold.isSelected()); // Sincroniza el JCheckBox de la barra de herramientas

    }//GEN-LAST:event_mnBoldActionPerformed

    private void mnItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnItalicActionPerformed
        // TODO add your handling code here:

        Font currentFont = txtHoja.getFont();
        int newStyle = currentFont.getStyle();

        if (mnItalic.isSelected()) {
            newStyle = newStyle | Font.ITALIC;
        } else {
            newStyle = newStyle & ~Font.ITALIC;
        }

        txtHoja.setFont(currentFont.deriveFont(newStyle));
        chcItalic.setSelected(mnItalic.isSelected()); // Sincroniza el JCheckBox de la barra de herramientas
    }//GEN-LAST:event_mnItalicActionPerformed

    private void mnColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnColorMouseClicked
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(null, "Elije un color", Color.yellow);
        txtHoja.setForeground(color);

    }//GEN-LAST:event_mnColorMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(wordProcesador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(wordProcesador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(wordProcesador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(wordProcesador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new wordProcesador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chcBold;
    private javax.swing.JCheckBox chcItalic;
    private javax.swing.JComboBox<String> cmbFont;
    private javax.swing.JComboBox<String> cmbSize;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFont;
    private javax.swing.JLabel lblRecuento;
    private javax.swing.JLabel lblSize;
    private javax.swing.JCheckBoxMenuItem mnBold;
    private javax.swing.JMenuItem mnCerrar;
    private javax.swing.JMenu mnColor;
    private javax.swing.JCheckBoxMenuItem mnItalic;
    private javax.swing.JMenuItem mnNuevo;
    private javax.swing.JPanel plBarraEstado;
    private javax.swing.JPanel plBarraHerramientas;
    private javax.swing.JTextArea txtHoja;
    private javax.swing.JTextField txtcantPalabra;
    // End of variables declaration//GEN-END:variables
}
